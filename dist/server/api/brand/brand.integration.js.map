{
  "version": 3,
  "sources": [
    "../../../../server/api/brand/brand.integration.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "brand.integration.js",
  "sourcesContent": [
    "'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newBrand;\n\ndescribe('Brand API:', function () {\n\n  describe('GET /api/brands', function () {\n    var brands;\n\n    beforeEach(function (done) {\n      request(app)\n      .get('/api/brands')\n      .expect(200)\n      .expect('Content-Type', /json/)\n      .end((err, res) => {\n        if (err) {\n          return done(err);\n        }\n        brands = res.body;\n        done();\n      });\n    });\n\n    it('should respond with JSON array', function () {\n      expect(brands).to.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/brands', function () {\n    beforeEach(function (done) {\n      request(app)\n      .post('/api/brands')\n      .send({\n        name: 'New Brand',\n        info: 'This is the brand new brand!!!'\n      })\n      .expect(201)\n      .expect('Content-Type', /json/)\n      .end((err, res) => {\n        if (err) {\n          return done(err);\n        }\n        newBrand = res.body;\n        done();\n      });\n    });\n\n    it('should respond with the newly created brand', function () {\n      expect(newBrand.name).to.equal('New Brand');\n      expect(newBrand.info).to.equal('This is the brand new brand!!!');\n    });\n\n  });\n\n  describe('GET /api/brands/:id', function () {\n    var brand;\n\n    beforeEach(function (done) {\n      request(app)\n      .get('/api/brands/' + newBrand._id)\n      .expect(200)\n      .expect('Content-Type', /json/)\n      .end((err, res) => {\n        if (err) {\n          return done(err);\n        }\n        brand = res.body;\n        done();\n      });\n    });\n\n    afterEach(function () {\n      brand = {};\n    });\n\n    it('should respond with the requested brand', function () {\n      expect(brand.name).to.equal('New Brand');\n      expect(brand.info).to.equal('This is the brand new brand!!!');\n    });\n\n  });\n\n  describe('PUT /api/brands/:id', function () {\n    var updatedBrand;\n\n    beforeEach(function (done) {\n      request(app)\n      .put('/api/brands/' + newBrand._id)\n      .send({\n        name: 'Updated Brand',\n        info: 'This is the updated brand!!!'\n      })\n      .expect(200)\n      .expect('Content-Type', /json/)\n      .end(function (err, res) {\n        if (err) {\n          return done(err);\n        }\n        updatedBrand = res.body;\n        done();\n      });\n    });\n\n    afterEach(function () {\n      updatedBrand = {};\n    });\n\n    it('should respond with the updated brand', function () {\n      expect(updatedBrand.name).to.equal('Updated Brand');\n      expect(updatedBrand.info).to.equal('This is the updated brand!!!');\n    });\n\n  });\n\n  describe('DELETE /api/brands/:id', function () {\n\n    it('should respond with 204 on successful removal', function (done) {\n      request(app)\n      .delete('/api/brands/' + newBrand._id)\n      .expect(204)\n      .end((err, res) => {\n        if (err) {\n          return done(err);\n        }\n        done();\n      });\n    });\n\n    it('should respond with 404 when brand does not exist', function (done) {\n      request(app)\n      .delete('/api/brands/' + newBrand._id)\n      .expect(404)\n      .end((err, res) => {\n        if (err) {\n          return done(err);\n        }\n        done();\n      });\n    });\n\n  });\n\n});\n"
  ]
}
