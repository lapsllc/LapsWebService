{
  "version": 3,
  "sources": [
    "../../../../server/api/product/product.integration.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "product.integration.js",
  "sourcesContent": [
    "'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newProduct;\n\ndescribe('Product API:', function () {\n\n  describe('GET /api/products', function () {\n    var products;\n\n    beforeEach(function (done) {\n      request(app)\n      .get('/api/products')\n      .expect(200)\n      .expect('Content-Type', /json/)\n      .end((err, res) => {\n        if (err) {\n          return done(err);\n        }\n        products = res.body;\n        done();\n      });\n    });\n\n    it('should respond with JSON array', function () {\n      expect(products).to.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/products', function () {\n    beforeEach(function (done) {\n      request(app)\n      .post('/api/products')\n      .send({\n        name: 'New Product',\n        info: 'This is the brand new product!!!'\n      })\n      .expect(201)\n      .expect('Content-Type', /json/)\n      .end((err, res) => {\n        if (err) {\n          return done(err);\n        }\n        newProduct = res.body;\n        done();\n      });\n    });\n\n    it('should respond with the newly created product', function () {\n      expect(newProduct.name).to.equal('New Product');\n      expect(newProduct.info).to.equal('This is the brand new product!!!');\n    });\n\n  });\n\n  describe('GET /api/products/:id', function () {\n    var product;\n\n    beforeEach(function (done) {\n      request(app)\n      .get('/api/products/' + newProduct._id)\n      .expect(200)\n      .expect('Content-Type', /json/)\n      .end((err, res) => {\n        if (err) {\n          return done(err);\n        }\n        product = res.body;\n        done();\n      });\n    });\n\n    afterEach(function () {\n      product = {};\n    });\n\n    it('should respond with the requested product', function () {\n      expect(product.name).to.equal('New Product');\n      expect(product.info).to.equal('This is the brand new product!!!');\n    });\n\n  });\n\n  describe('PUT /api/products/:id', function () {\n    var updatedProduct;\n\n    beforeEach(function (done) {\n      request(app)\n      .put('/api/products/' + newProduct._id)\n      .send({\n        name: 'Updated Product',\n        info: 'This is the updated product!!!'\n      })\n      .expect(200)\n      .expect('Content-Type', /json/)\n      .end(function (err, res) {\n        if (err) {\n          return done(err);\n        }\n        updatedProduct = res.body;\n        done();\n      });\n    });\n\n    afterEach(function () {\n      updatedProduct = {};\n    });\n\n    it('should respond with the updated product', function () {\n      expect(updatedProduct.name).to.equal('Updated Product');\n      expect(updatedProduct.info).to.equal('This is the updated product!!!');\n    });\n\n  });\n\n  describe('DELETE /api/products/:id', function () {\n\n    it('should respond with 204 on successful removal', function (done) {\n      request(app)\n      .delete('/api/products/' + newProduct._id)\n      .expect(204)\n      .end((err, res) => {\n        if (err) {\n          return done(err);\n        }\n        done();\n      });\n    });\n\n    it('should respond with 404 when product does not exist', function (done) {\n      request(app)\n      .delete('/api/products/' + newProduct._id)\n      .expect(404)\n      .end((err, res) => {\n        if (err) {\n          return done(err);\n        }\n        done();\n      });\n    });\n\n  });\n\n});\n"
  ]
}
